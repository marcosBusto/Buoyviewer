import { ChattyHostBuilder } from '@looker/chatty';
import BaseEmbedItem from './base-embed-item';
import { EmbedChartOptions } from './types';
declare class ChartEventSender extends BaseEmbedItem {
    protected name: string;
    protected ERRORS: {
        SEND: string;
        IFRAME: string;
    };
    protected COLOUR: {
        LIGHT: string;
        DARK: string;
    };
    protected options: EmbedChartOptions;
    /** @ignore */
    constructor(options: Partial<EmbedChartOptions>);
    protected getEmbedUrl(): string;
}
declare const Chart_base: {
    new (...args: any[]): {
        setFilter(value: object): Promise<void>;
        getFilter(): Promise<object>;
        setHighlight(value: object): Promise<void>;
        getHighlight(): Promise<object>;
        _send(msgName: string, ...payload: unknown[]): Promise<[unknown]>;
    };
} & {
    new (...args: any[]): {
        refresh(): Promise<void>;
        _send(msgName: string, ...payload: unknown[]): Promise<[unknown]>;
    };
} & {
    new (...args: any[]): {
        _eventHandlers: Record<import("./types").EmbedChartEvent, Record<string, {
            handle: import("./types").EventHandler;
            options: import("./types").EventHandlerOptions;
        }>>;
        _handleEvent(event: import("./types").EmbedChartEvent, payload: Record<string, unknown>, handlerIds: string[]): void;
        addEventListener(event: import("./types").EmbedChartEvent, eventHandler: import("./types").EventHandler, options?: import("./types").EventHandlerOptions | undefined): Promise<unknown>;
        removeEventListener(event: import("./types").EmbedChartEvent, eventHandler: import("./types").EventHandler, options?: import("./types").EventHandlerOptions | undefined): Promise<unknown>;
        _send(msgName: string, ...payload: unknown[]): Promise<[unknown]>;
    };
} & typeof ChartEventSender;
/**
 * # Chart
 *
 * Allows you to interact and embed charts into your application.
 *
 * ```js
 * const sdk = new EmbedSDK({ ... });
 * const chart = sdk.createChart({ ... });
 *
 * // renders a chart
 * chart.render(document.getElementById('embed-chart'));
 *
 * // dynamically set a filter
 * chart.setFilter({ age: { $gt: 50 } });
 * ```
 */
declare class Chart extends Chart_base {
    /**
     * @returns the number of seconds a chart will wait before refreshing
     * @deprecated This method is deprecated. Please use the 'autoRefresh' option with the 'maxDataAge' option to configure how often the chart refreshes.
     */
    getRefreshInterval(): Promise<number>;
    /**
     * Set the number of seconds a chart will wait before refreshing.
     *
     * The minimum refresh interval is 10 seconds. To disable, set the refresh interval to 0.
     * @deprecated This method is deprecated. Please use the 'autoRefresh' option with the 'maxDataAge' option to configure how often the chart refreshes.
     */
    setRefreshInterval(value: number): Promise<void>;
    /**
     * @returns the data of the embedded chart.
     */
    getData(): Promise<object>;
    protected _configureHost(hostBuilder: ChattyHostBuilder): ChattyHostBuilder;
}
export default Chart;
export type { Chart };
