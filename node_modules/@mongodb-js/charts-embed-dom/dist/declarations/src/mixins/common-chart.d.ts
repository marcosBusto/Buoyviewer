import { EventSender } from '../types';
/**
 * A class extender for common chart methods
 * @param Sender the parent class to be extended
 */
export declare function CommonChart<S extends EventSender>(Sender: S): {
    new (...args: any[]): {
        /**
         * Sets a filter to the state of the chart entity in the Charts app component.
         * The chart entity can be an embedded chart or an embedded dashboard chart.
         * The filter gets applied to the embedded chart.
         *
         * This expects an object that contains a valid [query operators](https://www.mongodb.com/docs/manual/reference/operator/query/#query-selectors).
         * Any fields referenced in this filter are expected to be allowed for filtering in the "Embed Chart" dialog for each Chart you wish to filter on.
         *
         * @param value The filter object to be applied to the chart
         * @returns a promise that resolves once the filter is saved and the component rerendered
         */
        setFilter(value: object): Promise<void>;
        /**
         * Returns the current filter applied to the embedded chart
         * The filter value is taken from the state of the chart entity in the Charts app component.
         *
         * @returns a promise that resolves once the filter is taken from the Charts state
         */
        getFilter(): Promise<object>;
        /**
         * Sets a highlight to the state of the chart entity in the Charts app component.
         * The chart entity can be an embedded chart or an embedded dashboard chart.
         * The highlight gets applied to the embedded chart.
         *
         * This is the exact same object that can be used in 'setFilter'.
         * However, it [doesn't support some query expressions] (https://www.mongodb.com/docs/charts/filter-embedded-charts/#filter-syntax)
         * And there are some specifics about what is highlightable (https://www.mongodb.com/docs/charts/highlight-chart-elements/)
         *
         * @param value The highlight object to be applied to the chart
         * @returns a promise that resolves once the highlight is saved and the component rerendered
         */
        setHighlight(value: object): Promise<void>;
        /**
         * Returns the current highlight applied to the embedded chart
         * The highlight value is taken from the state of the chart entity in the Charts app component.
         *
         * @returns a promise that resolves once the highlight is taken from the Charts state
         */
        getHighlight(): Promise<object>;
        _send(msgName: string, ...payload: unknown[]): Promise<[unknown]>;
    };
} & S;
